{"version":3,"file":"static/webpack/static/development/pages/work.js.4aaca7f186a758759b4c.hot-update.js","sources":["webpack:///./components/PostList.jsx"],"sourcesContent":["import { graphql } from 'react-apollo'\nimport gql from 'graphql-tag'\nimport { Router } from '../routes'\nimport ErrorMessage from './ErrorMessage'\nimport Head from 'next/head'\n\nconst POSTS_PER_PAGE = 10\n\nfunction handleClick(event, id, url) {\n  event.preventDefault()\n  Router.push({\n    pathname: `/work/${url}`,\n    asPath: `/work/${url}`\n  });\n}\n\nfunction PostList({ data: { loading, error, webs }, title, extraClass }) {\n  if (error) return <ErrorMessage message='Error loading posts.' />\n  if (webs && webs.length) {\n    return (\n      <section className={extraClass}>\n        <Head>\n          {title === undefined ? \n          <>\n          <title>Work</title> \n          <meta name=\"title\" content=\"Nick Hulea's Work and Projects\"></meta>\n          <meta name=\"description\" content=\"Nick Hulea's Work and Projects\"></meta>\n          </>\n          : ''}\n        </Head>\n        {title === undefined ? <h1>Work</h1> : ''}\n        <ul>\n          {webs.map((post, index) => (\n            post.URL !== title ? <li key={index + 1}>\n              <a props={post._id} href={`/work/${post.Data.Link}`} onClick={event => handleClick(event, post._id, post.Data.Link)}>\n                {post.Image !== null ? <span className=\"imgHero\" style={{ backgroundImage: `url(https://strapi.hulea.org/${post.Image.url})` }}></span> : ''}\n                <h2>{post.Title}</h2>\n              </a>\n            </li> : ''\n          ))}\n        </ul>\n        <style jsx>{`\n        `}</style>\n      </section>\n    )\n  }\n  return <div>Loading</div>\n}\n\nexport const allPosts = gql`\n  query {\n    webs {\n      _id\n      Title\n      Image {\n        url\n        ext\n        provider\n        size\n      }\n      Description\n      Data\n      URL\n      createdAt\n      updatedAt\n    }\n  }\n`\n\n\nexport const allPostsQueryVars = {\n  skip: 0,\n  first: POSTS_PER_PAGE\n}\n\n// The `graphql` wrapper executes a GraphQL query and makes the results\n// available on the `data` prop of the wrapped component (PostList)\nexport default graphql(allPosts, {\n  props: ({ data }) => ({\n    data,\n    loadMorePosts: () => {\n      return data.fetchMore({\n        variables: {\n          skip: data.allPosts.length\n        },\n        updateQuery: (previousResult, { fetchMoreResult }) => {\n          if (!fetchMoreResult) {\n            return previousResult\n          }\n          return Object.assign({}, previousResult, {\n            // Append the new posts results to the old one\n            allPosts: [...previousResult.allPosts, ...fetchMoreResult.allPosts]\n          })\n        }\n      })\n    }\n  })\n})(PostList)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAJA;AAZA;AAAA;AAAA;AAyBA;AACA;AAAA;AACA;AACA;AACA;AAqBA;AACA;AACA;AAIA;AACA;AAPA;AAOA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAZA;AAcA;AAjBA;AAAA;AADA;;;;A","sourceRoot":""}