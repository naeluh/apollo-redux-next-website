{"version":3,"file":"static/webpack/static/development/pages/blog.js.12ecb387c07731f194cd.hot-update.js","sources":["webpack:///./components/PostList.js"],"sourcesContent":["import { graphql } from 'react-apollo'\nimport gql from 'graphql-tag'\nimport { Router } from '../routes'\nimport ErrorMessage from './ErrorMessage'\n\nconst POSTS_PER_PAGE = 10\n\nfunction handleClick(event, id, url) {\n  event.preventDefault()\n  // With route name and params\n  Router.push({\n    href: `/blog/${id}`,\n    replace: `/blog/${url}`,\n    query: {\n      id: id\n    }\n  });\n  // With route URL\n  // Router.push(`/blog/${url}`)\n  console.log(Router)\n}\n\nfunction PostList({\n  data: { loading, error, allPosts, _allPostsMeta, webs },\n  loadMorePosts\n}) {\n  console.log(webs)\n  if (error) return <ErrorMessage message='Error loading posts.' />\n  if (webs && webs.length) {\n    const areMorePosts = false\n    return (\n      <section>\n        {webs.map((post, index) => (\n          <span key={index + 1}>\n            <a \n              props={post._id}\n              href={`/blog/${post.Data.Link}`}\n              onClick={event => handleClick(event, post._id, post.Data.Link)}\n            >\n              {post.Title} <span>/{post.Data.Link}</span>\n            </a>\n          </span>\n        ))}\n        {areMorePosts ? (\n          <button onClick={() => loadMorePosts()}>\n            {' '}\n            {loading ? 'Loading...' : 'Show More'}{' '}\n          </button>\n        ) : (\n            ''\n          )}\n        <style jsx>{`\n          section {\n            padding-bottom: 20px;\n          }\n          li {\n            display: block;\n            margin-bottom: 10px;\n          }\n          div {\n            align-items: center;\n            display: flex;\n          }\n          a {\n            font-size: 14px;\n            margin-right: 10px;\n            text-decoration: none;\n            padding-bottom: 0;\n            border: 0;\n          }\n          span {\n            font-size: 14px;\n            margin-right: 5px;\n          }\n          ul {\n            margin: 0;\n            padding: 0;\n          }\n          button:before {\n            align-self: center;\n            border-style: solid;\n            border-width: 6px 4px 0 4px;\n            border-color: #ffffff transparent transparent transparent;\n            content: '';\n            height: 0;\n            margin-right: 5px;\n            width: 0;\n          }\n        `}</style>\n      </section>\n    )\n  }\n  return <div>Loading</div>\n}\n\nexport const allPosts = gql`\n  query {\n    webs {\n      _id\n      Title\n      Image {\n        url\n        ext\n        provider\n        size\n      }\n      Description\n      Data\n      URL\n      createdAt\n      updatedAt\n    }\n  }\n`\n\n\nexport const allPostsQueryVars = {\n  skip: 0,\n  first: POSTS_PER_PAGE\n}\n\n// The `graphql` wrapper executes a GraphQL query and makes the results\n// available on the `data` prop of the wrapped component (PostList)\nexport default graphql(allPosts, {\n  props: ({ data }) => ({\n    data,\n    loadMorePosts: () => {\n      return data.fetchMore({\n        variables: {\n          skip: data.allPosts.length\n        },\n        updateQuery: (previousResult, { fetchMoreResult }) => {\n          if (!fetchMoreResult) {\n            return previousResult\n          }\n          return Object.assign({}, previousResult, {\n            // Append the new posts results to the old one\n            allPosts: [...previousResult.allPosts, ...fetchMoreResult.allPosts]\n          })\n        }\n      })\n    }\n  })\n})(PostList)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAHA;AAQA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAKA;AAAA;AAPA;AAYA;AAAA;AAAA;AAAA;AAAA;AAbA;AAAA;AAAA;AA4DA;AACA;AAAA;AACA;AACA;AACA;AAqBA;AACA;AACA;AAIA;AACA;AAPA;AAOA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAZA;AAcA;AAjBA;AAAA;AADA;;;;A","sourceRoot":""}